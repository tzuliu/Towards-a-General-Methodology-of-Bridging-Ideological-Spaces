ipv_dt2_pro2 <- ipv_dt2_pro2 %>% mutate(cv = "Voter")
ipv_dt2_reg2 <- ipv_dt2_reg %>% filter(party == "LDP" | party == "DPJ" | party == "JRP")
ipv_dt2_reg2 <- ipv_dt2_reg2 %>% mutate(cv = "Voter")
## Create candidate & voter IP data
ip_dt2_pro <- rbind(ipc_dt2_2, ipv_dt2_pro2)
## Create candidate & voter IP data
ip_dt2_reg <- rbind(ipc_dt2_2, ipv_dt2_reg2)
## Create IP data for (original) voters
ipv_dt2o <- data.frame(t2[[1]], dvp)
colnames(ipv_dt2o) <- c("coord1D","coord2D","party")
ipv_dt2o_2 <- ipv_dt2o %>% filter(party == "LDP" | party == "DPJ" | party == "JRP")
ipv_dt2o_2 <- ipv_dt2o_2 %>% mutate(cv = "Voter")
ip_dt2$cv2 <- ifelse(ip_dt2$cv=="Candidate",
"Candidate\n(untransformed)",
"Voter\n(untransformed)")
ip_dt2_pro$cv2 <- ifelse(ip_dt2_pro$cv=="Candidate",
"Candidate\n(XProcrustes)",
"Voter\n(Procrustes)")
ip_dt2_reg$cv2 <- ifelse(ip_dt2_reg$cv=="Candidate",
"Candidate\n(XRegression)",
"Voter\n(Regression)")
ip_dt2 <- rbind(ip_dt2,ip_dt2_pro,ip_dt2_reg)
ip_dt2$cv2 <- factor(ip_dt2$cv2, levels=unique(ip_dt2$cv2))
rm(ip_dt1_pro, ip_dt1_reg, ip_dt2_pro, ip_dt2_reg, ipc_dt1_pro, ipc_dt1_pro2,
ipc_dt1_reg, ipc_dt1_reg2, ipc_dt1o, ipc_dt1o_2, ipc_dt2, ipc_dt2_2, ipv_dt1,
ipv_dt1_2, ipv_dt2_pro, ipv_dt2_pro2, ipv_dt2_reg, ipv_dt2_reg2, ipv_dt2o,
ipv_dt2o_2, t, t1, t2, tj, utas2_c, utas2_c_p, utas2_j_p, utas2_v, utas2_v_p)
rm(dcp, dcp_new, dvp, dvp_new, jointpol, utas2_rightcand_c, utas2_rightcand_v, z, ipbridge)
## Clear Workspace
rm(list = ls())
## Load Data
load("/Users/tzupingliu/Desktop/Projects/Towards-a-General-Methodology-of-Bridging-Ideological-Spaces/Data/utas12_data.rda")
## Source functions
source("/Users/tzupingliu/Desktop/Projects/Towards-a-General-Methodology-of-Bridging-Ideological-Spaces/Replication R Codes/ipbridge.R")
utas2_j_p <- rbind.data.frame(utas2_c_p,utas2_v_p)
## Estimate
t <-ooc(utas2_j_p, dims=2, min=10, lop=0.0001, polarity=rep(jointpol,2), iter=25, nv.method="svm.reg", cost=1)
tj <- t$respondents[,grepl("coord", colnames(t$respondents))]
tj <- data.frame(tj)
z <- c(as.character(utas2_c$psup_short),as.character(utas2_v$psup_short))
z <- factor(z, levels=c("LDP","DPJ","JRP","JCP","Other/NA", "YP","TPJ","CGP (Komei)","SDP","Abstained"))
tj$party <- z
tj$cv <- c(rep("Candidate",nrow(utas2_c_p)), rep("Voter",nrow(utas2_v_p)))
ip_j <- tj %>% filter(party == "LDP" | party == "DPJ" | party == "JRP")
##Set.seed
set.seed(20191005)
## Estimate
t1 <-ipbridge(utas2_c_p,utas2_v_p,20,polarity1=rep(utas2_rightcand_c,2),
polarity2=rep(utas2_rightcand_v,2))
## Create IP data for candidates
dcp <- utas2_c$psup_short
dcp_new <- dcp[-t1[[5]]]
dcp <- c(as.character(dcp_new), as.character(dcp[t1[[5]]]))
dcp <- factor(dcp)
ipc_dt1_pro <- data.frame(t1[[2]], dcp)
ipc_dt1_reg <- data.frame(t1[[3]], dcp)
colnames(ipc_dt1_pro) <- c("coord1D","coord2D","party")
colnames(ipc_dt1_reg) <- c("coord1D","coord2D","party")
ipc_dt1_pro2 <- ipc_dt1_pro %>% filter(party == "LDP" | party == "DPJ" | party == "JRP")
ipc_dt1_pro2 <- ipc_dt1_pro2 %>% mutate(cv = "Candidate")
ipc_dt1_reg2 <- ipc_dt1_reg %>% filter(party == "LDP" | party == "DPJ" | party == "JRP")
ipc_dt1_reg2 <- ipc_dt1_reg2 %>% mutate(cv = "Candidate")
## Create IP data for voters
ipv_dt1 <- data.frame(t1[[4]], utas2_v$psup_short)
colnames(ipv_dt1) <- c("coord1D","coord2D","party")
ipv_dt1_2 <- ipv_dt1 %>% filter(party == "LDP" | party == "DPJ" | party == "JRP")
ipv_dt1_2 <- ipv_dt1_2 %>% mutate(cv = "Voter")
## Create candidate & voter IP data
ip_dt1_pro <- rbind(ipc_dt1_pro2, ipv_dt1_2)
ip_dt1_pro$party <- factor(ip_dt1_pro$party, levels=c("LDP","DPJ","JRP","JCP","Other/NA", "YP","TPJ","CGP (Komei)","SDP","Abstained"))
## Create candidate & voter IP data, second
ip_dt1_reg <- rbind(ipc_dt1_reg2, ipv_dt1_2)
ip_dt1_reg$party <- factor(ip_dt1_reg$party, levels=c("LDP","DPJ","JRP","JCP","Other/NA", "YP","TPJ","CGP (Komei)","SDP","Abstained"))
## Create IP data for (original) voters
ipc_dt1o <- data.frame(t1[[1]], dcp)
colnames(ipc_dt1o) <- c("coord1D","coord2D","party")
ipc_dt1o_2 <- ipc_dt1o %>% filter(party == "LDP" | party == "DPJ" | party == "JRP")
ipc_dt1o_2 <- ipc_dt1o_2 %>% mutate(cv = "Candidate")
## Create candidate & (original) voter IP data
ip_dt1 <- rbind(ipc_dt1o_2, ipv_dt1_2)
ip_dt1$party <- factor(ip_dt1$party, levels=c("LDP","DPJ","JRP","JCP","Other/NA", "YP","TPJ","CGP (Komei)","SDP","Abstained"))
ip_dt1$cv2 <- ifelse(ip_dt1$cv=="Candidate",
"Candidate\n(untransformed)",
"Voter\n(untransformed)")
ip_dt1_pro$cv2 <- ifelse(ip_dt1_pro$cv=="Candidate",
"Candidate\n(Procrustes)",
"Voter\n(XProcrustes)")
ip_dt1_reg$cv2 <- ifelse(ip_dt1_reg$cv=="Candidate",
"Candidate\n(Regression)",
"Voter\n(XRegression)")
ip_dt1 <- rbind(ip_dt1,ip_dt1_pro,ip_dt1_reg)
ip_dt1$cv2 <- factor(ip_dt1$cv2, levels=unique(ip_dt1$cv2))
## set.seed
set.seed(20191005)
## Estimate
t2 <-ipbridge(utas2_v_p,utas2_c_p,20,polarity1=rep(utas2_rightcand_v,2),
polarity2=rep(utas2_rightcand_c,2))
## Create IP data for candidates
ipc_dt2 <- data.frame(t2[[4]], utas2_c$psup_short)
ipc_dt2_2 <- ipc_dt2 %>% filter(utas2_c.psup_short == "LDP" | utas2_c.psup_short == "DPJ" | utas2_c.psup_short == "JRP")
colnames(ipc_dt2_2) <- c("coord1D","coord2D","party")
ipc_dt2_2 <- ipc_dt2_2 %>% mutate(cv = "Candidate")
## Create IP data for voters
dvp <- utas2_v$psup_short
dvp_new <- dvp[-t2[[5]]]
dvp <- c(as.character(dvp_new), as.character(dvp[t2[[5]]]))
dvp <- factor(dvp)
ipv_dt2_pro <- data.frame(t2[[2]], dvp)
ipv_dt2_reg <- data.frame(t2[[3]], dvp)
colnames(ipv_dt2_pro) <- c("coord1D","coord2D","party")
colnames(ipv_dt2_reg) <- c("coord1D","coord2D","party")
ipv_dt2_pro2 <- ipv_dt2_pro %>% filter(party == "LDP" | party == "DPJ" | party == "JRP")
ipv_dt2_pro2 <- ipv_dt2_pro2 %>% mutate(cv = "Voter")
ipv_dt2_reg2 <- ipv_dt2_reg %>% filter(party == "LDP" | party == "DPJ" | party == "JRP")
ipv_dt2_reg2 <- ipv_dt2_reg2 %>% mutate(cv = "Voter")
## Create candidate & voter IP data
ip_dt2_pro <- rbind(ipc_dt2_2, ipv_dt2_pro2)
## Create candidate & voter IP data
ip_dt2_reg <- rbind(ipc_dt2_2, ipv_dt2_reg2)
## Create IP data for (original) voters
ipv_dt2o <- data.frame(t2[[1]], dvp)
colnames(ipv_dt2o) <- c("coord1D","coord2D","party")
ipv_dt2o_2 <- ipv_dt2o %>% filter(party == "LDP" | party == "DPJ" | party == "JRP")
ipv_dt2o_2 <- ipv_dt2o_2 %>% mutate(cv = "Voter")
## Create candidate & (original) voter IP data
ip_dt2 <- rbind(ipc_dt2_2, ipv_dt2o_2)
ipv_dt2o <- data.frame(t2[[1]], dvp)
colnames(ipv_dt2o) <- c("coord1D","coord2D","party")
ipv_dt2o_2 <- ipv_dt2o %>% filter(party == "LDP" | party == "DPJ" | party == "JRP")
ipv_dt2o_2 <- ipv_dt2o_2 %>% mutate(cv = "Voter")
ip_dt2$cv2 <- ifelse(ip_dt2$cv=="Candidate",
"Candidate\n(untransformed)",
"Voter\n(untransformed)")
ip_dt2_pro$cv2 <- ifelse(ip_dt2_pro$cv=="Candidate",
"Candidate\n(XProcrustes)",
"Voter\n(Procrustes)")
ip_dt2_reg$cv2 <- ifelse(ip_dt2_reg$cv=="Candidate",
"Candidate\n(XRegression)",
"Voter\n(Regression)")
ip_dt2 <- rbind(ip_dt2,ip_dt2_pro,ip_dt2_reg)
ip_dt2$cv2 <- factor(ip_dt2$cv2, levels=unique(ip_dt2$cv2))
rm(ip_dt1_pro, ip_dt1_reg, ip_dt2_pro, ip_dt2_reg, ipc_dt1_pro, ipc_dt1_pro2,
ipc_dt1_reg, ipc_dt1_reg2, ipc_dt1o, ipc_dt1o_2, ipc_dt2, ipc_dt2_2, ipv_dt1,
ipv_dt1_2, ipv_dt2_pro, ipv_dt2_pro2, ipv_dt2_reg, ipv_dt2_reg2, ipv_dt2o,
ipv_dt2o_2, t, t1, t2, tj, utas2_c, utas2_c_p, utas2_j_p, utas2_v, utas2_v_p)
rm(dcp, dcp_new, dvp, dvp_new, jointpol, utas2_rightcand_c, utas2_rightcand_v, z, ipbridge)
save.image("utas12_ip.rda")
## Clear Workspace
rm(list = ls())
library(ggplot2)
library(ggrepel)
## Load Data
load("/Users/tzupingliu/Desktop/Projects/Towards-a-General-Methodology-of-Bridging-Ideological-Spaces/Data/utas12_ip.rda")
ip_j$cv2 <- ifelse(ip_j$cv=="Candidate","Candidate\n","Voter\n")
pj <- ggplot(data=ip_j,
aes(x=coord1D, y=coord2D, color=party, shape=party)) +
geom_point(size=2, alpha=0.6) +
# xlab("1st dimension") + ylab("2nd dimension") +
xlab(NULL) + ylab(NULL) +
ggtitle("Joint") +
scale_color_brewer(name="", type="qual", palette=2) +
# scale_colour_manual(name="", values = c("#507AA6", "#DF585C"),
#                     labels=c("LDP","DPJ")) +
scale_shape_discrete(name="") +
coord_cartesian(xlim=c(-1,1),ylim=c(-1,1)) +
scale_x_continuous(breaks=c(-0.5,0,0.5),labels=c("-.5","0",".5")) +
scale_y_continuous(breaks=c(-0.5,0,0.5),labels=c("-.5","0",".5")) +
facet_wrap(~cv2, ncol=1) +
guides(color=guide_legend(ncol=1,nrow=3,byrow=TRUE),
shape=guide_legend(ncol=1,nrow=3,byrow=TRUE)) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
legend.position="bottom")
pj
p1 <- ggplot(data=ip_dt1,
aes(x=coord1D, y=coord2D, color=party, shape=party)) +
geom_point(size=2, alpha=0.6) +
# xlab("1st dimension") + ylab("2nd dimension") +
xlab(NULL) + ylab(NULL) +
ggtitle("Transform candidates") +
scale_color_brewer(name="", type="qual", palette=2) +
# scale_colour_manual(name="", values = c("#507AA6", "#DF585C"),
#                     labels=c("LDP","DPJ")) +
scale_shape_discrete(name="Party") +
coord_cartesian(xlim=c(-1,1),ylim=c(-1,1)) +
scale_x_continuous(breaks=c(-0.5,0,0.5),labels=c("-.5","0",".5")) +
scale_y_continuous(breaks=c(-0.5,0,0.5),labels=c("-.5","0",".5")) +
facet_wrap(~cv2, ncol=2) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
legend.position="none")
p1
require(grid)
g1 <- ggplotGrob(p1)
# get the grobs that must be removed
rm_grobs <- g1$layout$name %in% c("strip-t-2-2", "strip-t-2-3", "panel-1-3", "panel-2-3")
# remove grobs
g1$grobs[rm_grobs] <- NULL
g1$layout <- g1$layout[!rm_grobs, ]
## move axis closer to panel
g1$layout[g1$layout$name == "axis-b-2-3", c("t", "b")] = c(10, 10)
grid.newpage()
grid.draw(g1)
p2 <- ggplot(data=ip_dt2,
aes(x=coord1D, y=coord2D, color=party, shape=party)) +
geom_point(size=2, alpha=0.6) +
# xlab("1st dimension") + ylab("2nd dimension") +
ggtitle("Transform voters") +
xlab(NULL) + ylab(NULL) +
scale_color_brewer(name="", type="qual", palette=2) +
# scale_colour_manual(name="", values = c("#507AA6", "#DF585C"),
#                     labels=c("LDP","DPJ")) +
scale_shape_discrete(name="Party") +
coord_cartesian(xlim=c(-1,1),ylim=c(-1,1)) +
scale_x_continuous(breaks=c(-0.5,0,0.5),labels=c("-.5","0",".5")) +
scale_y_continuous(breaks=c(-0.5,0,0.5),labels=c("-.5","0",".5"), position="right") +
facet_wrap(~cv2, ncol=2) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
legend.position="none")
p2
require(grid)
g2 <- ggplotGrob(p2)
# get the grobs that must be removed
rm_grobs <- g2$layout$name %in% c("strip-t-1-3", "strip-t-1-2", "panel-2-1", "panel-1-2")
# remove grobs
g2$grobs[rm_grobs] <- NULL
g2$layout <- g2$layout[!rm_grobs, ]
## move axis closer to panel
g2$layout[g2$layout$name == "axis-b-1-3", c("t", "b")] = c(10, 10)
grid.newpage()
grid.draw(g2)
require(gridExtra)
blank <- grid.rect(gp=gpar(col="white"))
pall <- arrangeGrob(g2,
arrangeGrob(blank,pj,blank,ncol=1,heights=c(0.15,2,0.2)),
g1, ncol=3, widths=c(1,0.55,1),
bottom = "1st dimension",
left = "2nd dimension")
grid.draw(pall)
ggsave("utas12_figure.pdf", pall, width=10, height=6.5)
utas1_tmp <- utas1[,15:37]
del_rep <- vector()
for(i in 1:nrow(utas1_tmp)){
if(sum(is.na(utas1_tmp[i,]))/22 > 0.8){
del_rep <- c(del_rep,i)
}
}
utas1 <- utas1[-del_rep,]
utas1_v <- utas1[utas1$cv=="voter",]
utas1_v_sub <- vector()
utas1_v_p <- utas1_v[,15:37]
utas1 <- readRDS("/Users/tzupingliu/Desktop/Projects/Bridging (O)OC/utas09_ooc.rds")
utas1_tmp <- utas1[,15:37]
del_rep <- vector()
for(i in 1:nrow(utas1_tmp)){
if(sum(is.na(utas1_tmp[i,]))/22 > 0.8){
del_rep <- c(del_rep,i)
}
}
utas1 <- utas1[-del_rep,]
utas1_v <- utas1[utas1$cv=="voter",]
utas1_v_sub <- vector()
utas1_v_p <- utas1_v[,15:37]
detvs <- names(utas1)[-c(1:14)][names(utas1)[-c(1:14)] %in% lsv$qid[!is.na(lsv$q_right)]]
detis <- lsv$q_right[!is.na(lsv$q_right)][lsv$qid[!is.na(lsv$q_right)] %in% names(utas1)[-c(1:14)]]
names(utas1)
lsv$qid[!is.na(lsv$q_right)]
for(i in 1:length(detis)){
if(detis[i] < 0){
#tmp_d <- utas2_v[,detvs[i]]-6
utas1_v_sub <- cbind(utas1_v_sub, utas1_v[,detvs[i]]-6)#tmp_d)
}else{
utas1_v_sub <- cbind(utas1_v_sub, utas1_v[,detvs[i]])
}
}
utas1_v_sub <- data.frame(utas1_v_sub)
colnames(utas1_v_sub) <- c(detvs)
tmp_v <- unlist(sapply(1:length(detvs), function(i) which(utas1_v_sub[,detvs[i]]*detis[i] >= 4)))
utas1_rightcand_v <- table(tmp_v)[which(as.vector(table(tmp_v))==max(table(tmp_v)))]
utas1_v[as.numeric(names(utas1_rightcand_v)),c(3:5)]
#utas1[which(utas1$cv=="voter"),][as.numeric(names(utas1_rightcand_v)),c(3:4)]
utas1_rightcand_v <- as.numeric(names(utas1_rightcand_v)[2])
utas1_c <- utas1[utas1$cv=="candidate",]
utas1_c_sub <- vector()
#utas1_c_new <- rbind(utas1_c, utas1_v[(nrow(utas1_v_p)-(29:0)),])
utas1_c_p <- utas1_c[,15:37]
for(i in 1:length(detis)){
if(detis[i] < 0){
#tmp_d <- utas2_v[,detvs[i]]-6
utas1_c_sub <- cbind(utas1_c_sub, utas1_c[,detvs[i]]-6)#tmp_d)
}else{
utas1_c_sub <- cbind(utas1_c_sub, utas1_c[,detvs[i]])
}
}
utas1_c_sub <- data.frame(utas1_c_sub)
colnames(utas1_c_sub) <- c(detvs)
tmp_c <- unlist(sapply(1:length(detvs), function(i) which(utas1_c_sub[,detvs[i]]*detis[i] >= 4)))
utas1_rightcand_c <- table(tmp_c)[which(as.vector(table(tmp_c))==max(table(tmp_c)))]
utas1_c[as.numeric(names(utas1_rightcand_c)),c(3:5)]
utas1_rightcand_c <- as.numeric(names(utas1_rightcand_c)[2])
polar <- nrow(utas1_c_p) + utas1_rightcand_v
## Clear Workspace
rm(list = ls())
## Load Data
lsv <- read.csv("/Users/tzupingliu/Desktop/Projects/Bridging (O)OC/utas_variable_list.csv",
stringsAsFactors = FALSE, encoding = "UTF-8")
utas1 <- readRDS("/Users/tzupingliu/Desktop/Projects/Bridging (O)OC/utas09_ooc.rds")
utas1_tmp <- utas1[,15:37]
del_rep <- vector()
for(i in 1:nrow(utas1_tmp)){
if(sum(is.na(utas1_tmp[i,]))/22 > 0.8){
del_rep <- c(del_rep,i)
}
}
utas1 <- utas1[-del_rep,]
utas1_v <- utas1[utas1$cv=="voter",]
utas1_v_sub <- vector()
utas1_v_p <- utas1_v[,15:37]
detvs <- names(utas1)[-c(1:14)][names(utas1)[-c(1:14)] %in% lsv$qid[!is.na(lsv$q_right)]]
detis <- lsv$q_right[!is.na(lsv$q_right)][lsv$qid[!is.na(lsv$q_right)] %in% names(utas1)[-c(1:14)]]
names(utas1)
lsv$qid[!is.na(lsv$q_right)]
for(i in 1:length(detis)){
if(detis[i] < 0){
#tmp_d <- utas2_v[,detvs[i]]-6
utas1_v_sub <- cbind(utas1_v_sub, utas1_v[,detvs[i]]-6)#tmp_d)
}else{
utas1_v_sub <- cbind(utas1_v_sub, utas1_v[,detvs[i]])
}
}
utas1_v_sub <- data.frame(utas1_v_sub)
colnames(utas1_v_sub) <- c(detvs)
tmp_v <- unlist(sapply(1:length(detvs), function(i) which(utas1_v_sub[,detvs[i]]*detis[i] >= 4)))
utas1_rightcand_v <- table(tmp_v)[which(as.vector(table(tmp_v))==max(table(tmp_v)))]
utas1_v[as.numeric(names(utas1_rightcand_v)),c(3:5)]
#utas1[which(utas1$cv=="voter"),][as.numeric(names(utas1_rightcand_v)),c(3:4)]
utas1_rightcand_v <- as.numeric(names(utas1_rightcand_v)[2])
utas1_c <- utas1[utas1$cv=="candidate",]
utas1_c_sub <- vector()
#utas1_c_new <- rbind(utas1_c, utas1_v[(nrow(utas1_v_p)-(29:0)),])
utas1_c_p <- utas1_c[,15:37]
for(i in 1:length(detis)){
if(detis[i] < 0){
#tmp_d <- utas2_v[,detvs[i]]-6
utas1_c_sub <- cbind(utas1_c_sub, utas1_c[,detvs[i]]-6)#tmp_d)
}else{
utas1_c_sub <- cbind(utas1_c_sub, utas1_c[,detvs[i]])
}
}
utas1_c_sub <- data.frame(utas1_c_sub)
colnames(utas1_c_sub) <- c(detvs)
tmp_c <- unlist(sapply(1:length(detvs), function(i) which(utas1_c_sub[,detvs[i]]*detis[i] >= 4)))
utas1_rightcand_c <- table(tmp_c)[which(as.vector(table(tmp_c))==max(table(tmp_c)))]
utas1_c[as.numeric(names(utas1_rightcand_c)),c(3:5)]
utas1_rightcand_c <- as.numeric(names(utas1_rightcand_c)[2])
polar <- nrow(utas1_c_p) + utas1_rightcand_v
jointpol <- nrow(utas1_c_p) + utas1_rightcand_v
## Clear Workspace
rm(list = ls())
## Load Data
lsv <- read.csv("/Users/tzupingliu/Desktop/Projects/Bridging (O)OC/utas_variable_list.csv",
stringsAsFactors = FALSE, encoding = "UTF-8")
utas1 <- readRDS("/Users/tzupingliu/Desktop/Projects/Bridging (O)OC/utas09_ooc.rds")
utas1_tmp <- utas1[,15:37]
del_rep <- vector()
for(i in 1:nrow(utas1_tmp)){
if(sum(is.na(utas1_tmp[i,]))/22 > 0.8){
del_rep <- c(del_rep,i)
}
}
utas1 <- utas1[-del_rep,]
utas1_v <- utas1[utas1$cv=="voter",]
utas1_v_sub <- vector()
utas1_v_p <- utas1_v[,15:37]
detvs <- names(utas1)[-c(1:14)][names(utas1)[-c(1:14)] %in% lsv$qid[!is.na(lsv$q_right)]]
detis <- lsv$q_right[!is.na(lsv$q_right)][lsv$qid[!is.na(lsv$q_right)] %in% names(utas1)[-c(1:14)]]
names(utas1)
lsv$qid[!is.na(lsv$q_right)]
for(i in 1:length(detis)){
if(detis[i] < 0){
#tmp_d <- utas2_v[,detvs[i]]-6
utas1_v_sub <- cbind(utas1_v_sub, utas1_v[,detvs[i]]-6)#tmp_d)
}else{
utas1_v_sub <- cbind(utas1_v_sub, utas1_v[,detvs[i]])
}
}
utas1_v_sub <- data.frame(utas1_v_sub)
colnames(utas1_v_sub) <- c(detvs)
tmp_v <- unlist(sapply(1:length(detvs), function(i) which(utas1_v_sub[,detvs[i]]*detis[i] >= 4)))
utas1_rightcand_v <- table(tmp_v)[which(as.vector(table(tmp_v))==max(table(tmp_v)))]
utas1_v[as.numeric(names(utas1_rightcand_v)),c(3:5)]
#utas1[which(utas1$cv=="voter"),][as.numeric(names(utas1_rightcand_v)),c(3:4)]
utas1_rightcand_v <- as.numeric(names(utas1_rightcand_v)[2])
utas1_c <- utas1[utas1$cv=="candidate",]
utas1_c_sub <- vector()
#utas1_c_new <- rbind(utas1_c, utas1_v[(nrow(utas1_v_p)-(29:0)),])
utas1_c_p <- utas1_c[,15:37]
for(i in 1:length(detis)){
if(detis[i] < 0){
#tmp_d <- utas2_v[,detvs[i]]-6
utas1_c_sub <- cbind(utas1_c_sub, utas1_c[,detvs[i]]-6)#tmp_d)
}else{
utas1_c_sub <- cbind(utas1_c_sub, utas1_c[,detvs[i]])
}
}
utas1_c_sub <- data.frame(utas1_c_sub)
colnames(utas1_c_sub) <- c(detvs)
tmp_c <- unlist(sapply(1:length(detvs), function(i) which(utas1_c_sub[,detvs[i]]*detis[i] >= 4)))
utas1_rightcand_c <- table(tmp_c)[which(as.vector(table(tmp_c))==max(table(tmp_c)))]
utas1_c[as.numeric(names(utas1_rightcand_c)),c(3:5)]
utas1_rightcand_c <- as.numeric(names(utas1_rightcand_c)[2])
jointpol <- nrow(utas1_c_p) + utas1_rightcand_v
rm(lsv, utas1, utas1_c_sub, utas1_tmp, utas1_v_sub, del_rep, detis, detvs, i, tmp_c, tmp_v)
save.image("utas09_data.rda")
## Clear Workspace
rm(list = ls())
## Load Data
load("/Users/tzupingliu/Desktop/Projects/Towards-a-General-Methodology-of-Bridging-Ideological-Spaces/Data/utas09_data.rda")
## Source functions
source("/Users/tzupingliu/Desktop/Projects/Towards-a-General-Methodology-of-Bridging-Ideological-Spaces/Replication R Codes/ipbridge.R")
utas1_j_p <- rbind.data.frame(utas1_c_p,utas1_v_p)
## Estimate
t <-ooc(utas1_j_p, dims=2, min=10, lop=0.0001, polarity=rep(polar,2), iter=25, nv.method="svm.reg", cost=1)
tj <- t$respondents[,grepl("coord", colnames(t$respondents))]
tj <- data.frame(tj)
z <- c(as.character(utas1_c$psup_short),as.character(utas1_v$psup_short))
z <- factor(z, levels=c("LDP","DPJ","JCP","Other/NA", "SDP","YP","CGP (Komei)","PNP","Abstained"))
tj$party <- z
## Estimate
t <-ooc(utas1_j_p, dims=2, min=10, lop=0.0001, jointpol=rep(polar,2), iter=25, nv.method="svm.reg", cost=1)
tj <- t$respondents[,grepl("coord", colnames(t$respondents))]
## Estimate
t <-ooc(utas1_j_p, dims=2, min=10, lop=0.0001, polarity=rep(jointpol,2), iter=25, nv.method="svm.reg", cost=1)
tj <- t$respondents[,grepl("coord", colnames(t$respondents))]
tj <- data.frame(tj)
z <- c(as.character(utas1_c$psup_short),as.character(utas1_v$psup_short))
z <- factor(z, levels=c("LDP","DPJ","JCP","Other/NA", "SDP","YP","CGP (Komei)","PNP","Abstained"))
tj$party <- z
tj$cv <- c(rep("Candidate",nrow(utas1_c_p)), rep("Voter",nrow(utas1_v_p)))
ip_j <- tj %>% filter(party == "LDP" | party == "DPJ" )
## set.seed
set.seed(20191005)
## Estimate
t1 <-ipbridge(utas1_c_p,utas1_v_p,20,polarity1=rep(utas1_rightcand_c,2),
polarity2=rep(utas1_rightcand_v,2))
## Create IP data for candidates
dcp <- utas1_c$psup_short
dcp_new <- dcp[-t1[[5]]]
dcp <- c(as.character(dcp_new), as.character(dcp[t1[[5]]]))
dcp <- factor(dcp)
ipc_dt1_pro <- data.frame(t1[[2]], dcp)
ipc_dt1_reg <- data.frame(t1[[3]], dcp)
colnames(ipc_dt1_pro) <- c("coord1D","coord2D","party")
colnames(ipc_dt1_reg) <- c("coord1D","coord2D","party")
ipc_dt1_pro2 <- ipc_dt1_pro %>% filter(party == "LDP" | party == "DPJ" )
ipc_dt1_pro2 <- ipc_dt1_pro2 %>% mutate(cv = "Candidate")
ipc_dt1_reg2 <- ipc_dt1_reg %>% filter(party == "LDP" | party == "DPJ" )
ipc_dt1_reg2 <- ipc_dt1_reg2 %>% mutate(cv = "Candidate")
## Create IP data for voters
ipv_dt1 <- data.frame(t1[[4]], utas1_v$psup_short)
colnames(ipv_dt1) <- c("coord1D","coord2D","party")
ipv_dt1_2 <- ipv_dt1 %>% filter(party == "LDP" | party == "DPJ" )
ipv_dt1_2 <- ipv_dt1_2 %>% mutate(cv = "Voter")
## Create candidate & voter IP data (Procrustes)
ip_dt1_pro <- rbind(ipc_dt1_pro2, ipv_dt1_2)
ip_dt1_pro$party <- factor(ip_dt1_pro$party, levels=c("LDP","DPJ","JCP","Other/NA", "YP","CGP (Komei)","SDP","PNP","Abstained"))
## Create candidate & voter IP data (Regression)
ip_dt1_reg <- rbind(ipc_dt1_reg2, ipv_dt1_2)
ip_dt1_reg$party <- factor(ip_dt1_reg$party, levels=c("LDP","DPJ","JCP","Other/NA", "YP","CGP (Komei)","SDP","PNP","Abstained"))
## Create IP data for (original) voters
ipc_dt1o <- data.frame(t1[[1]], dcp)
colnames(ipc_dt1o) <- c("coord1D","coord2D","party")
ipc_dt1o_2 <- ipc_dt1o %>% filter(party == "LDP" | party == "DPJ" )
ipc_dt1o_2 <- ipc_dt1o_2 %>% mutate(cv = "Candidate")
## Create candidate & (original) voter IP data
ip_dt1 <- rbind(ipc_dt1o_2, ipv_dt1_2)
ip_dt1$party <- factor(ip_dt1$party, levels=c("LDP","DPJ","JCP","Other/NA", "YP","CGP (Komei)","SDP","PNP","Abstained"))
##set.seed
set.seed(20191005)
## Estimate
t2 <-ipbridge(utas1_v_p,utas1_c_p,20,polarity1=rep(utas1_rightcand_v,2),
polarity2=rep(utas1_rightcand_c,2))
## Create IP data for candidates
ipc_dt2 <- data.frame(t2[[4]], utas1_c$psup_short)
colnames(ipc_dt2) <- c("coord1D","coord2D","party")
ipc_dt2_2 <- ipc_dt2 %>% filter(party == "LDP" | party == "DPJ" )
ipc_dt2_2 <- ipc_dt2_2 %>% mutate(cv = "Candidate")
## Create IP data for voters
dvp <- utas1_v$psup_short
dvp_new <- dvp[-t2[[5]]]
dvp <- c(as.character(dvp_new), as.character(dvp[t2[[5]]]))
dvp <- factor(dvp)
ipv_dt2_pro <- data.frame(t2[[2]], dvp)
ipv_dt2_reg <- data.frame(t2[[3]], dvp)
colnames(ipv_dt2_pro) <- c("coord1D","coord2D","party")
colnames(ipv_dt2_reg) <- c("coord1D","coord2D","party")
ipv_dt2_pro2 <- ipv_dt2_pro %>% filter(party == "LDP" | party == "DPJ" )
ipv_dt2_pro2 <- ipv_dt2_pro2 %>% mutate(cv = "Voter")
ipv_dt2_reg2 <- ipv_dt2_reg %>% filter(party == "LDP" | party == "DPJ" )
ipv_dt2_reg2 <- ipv_dt2_reg2 %>% mutate(cv = "Voter")
## Create candidate & voter IP data
ip_dt2_pro <- rbind(ipc_dt2_2, ipv_dt2_pro2)
## Create candidate & voter IP data
ip_dt2_reg <- rbind(ipc_dt2_2, ipv_dt2_reg2)
## Create IP data for (original) voters
ipv_dt2o <- data.frame(t2[[1]], dvp)
colnames(ipv_dt2o) <- c("coord1D","coord2D","party")
ipv_dt2o_2 <- ipv_dt2o %>% filter(party == "LDP" | party == "DPJ" )
ipv_dt2o_2 <- ipv_dt2o_2 %>% mutate(cv = "Voter")
## Create candidate & (original) voter IP data
ip_dt2 <- rbind(ipc_dt2_2, ipv_dt2o_2)
